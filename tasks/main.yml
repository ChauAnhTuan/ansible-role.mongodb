---
# Variable setup.
- name: Include version-specific variables for Redhat/Centos.
  include_vars: "{{ ansible_os_family }}.yml"
  when: ansible_os_family == 'RedHat'

- name: Include version-specific variables for Debian.
  include_vars: "{{ ansible_distribution|title }}-{{ ansible_distribution_version.split('.')[0] }}.yml"
  when: ansible_distribution == 'Debian'

- name: Include version-specific variables for Ubuntu.
  include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_version.split('.')[0] }}.yml"
  when: ansible_distribution == 'Ubuntu'

# Setup/install tasks.
- include_tasks: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include_tasks: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- name: Ensure {{ service_name }} service is running as configured.
  service:
    name: "{{ service_name }}"
    state: "{{ service_service_state }}"
    enabled: "{{ service_service_enabled }}"

- name: Generate a password for user "{{ mongodb_user_ac }}" of the MongoDB
  shell: </dev/urandom tr -dc '12345!@#$%qwertQWERTasdfgASDFGzxcvbZXCVB' | head -c8; echo ""
  register: mongodb_password

- name: MongoDB Enable Access Control
  mongodb_user:
    database: "admin"
    name: "{{ mongodb_user_ac }}"
    password: user_password.stdout 
    # login_host: "{{ mongodb_bind_ip }}"
    # login_port: "{{ mongodb_port }}"
    # login_user: "{{ admin_login }}"
    # login_password: "{{ admin_password }}"
    state: present
  when: mongo_access_control_enabled == "true"
  register: mongodb_user

- name:  MongoDB user created
  debug: msg="Password for "{{ mongodb_user_ac }}" is {{ mongodb_password.stdout }}"
  when: mongodb_user.changed